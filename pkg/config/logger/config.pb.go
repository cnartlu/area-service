// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: pkg/config/logger/config.proto

package logger

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 日志文件路径。默认为空，表示关闭，仅输出到终端
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// 日志文件格式。默认为"{Y-m-d}.log"
	File string `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	// 日志内容输出前缀。默认为空
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// 日志输出级别
	Level string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	// 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
	CtxKeys map[string]*anypb.Any `protobuf:"bytes,5,rep,name=ctx_keys,json=ctxKeys,proto3" json:"ctx_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 是否打印日志的头信息。默认true
	Header *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=header,proto3" json:"header,omitempty"`
	// 日志是否同时输出到终端。默认true
	Stdout *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
	RotateSize int64 `protobuf:"varint,8,opt,name=rotate_size,json=rotateSize,proto3" json:"rotate_size,omitempty"`
	// 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
	RotateExpire int64 `protobuf:"varint,9,opt,name=rotate_expire,json=rotateExpire,proto3" json:"rotate_expire,omitempty"`
	// 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
	RotateBackupLimit int64 `protobuf:"varint,10,opt,name=rotate_backup_limit,json=rotateBackupLimit,proto3" json:"rotate_backup_limit,omitempty"`
	// 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
	RotateBackupExpire int64 `protobuf:"varint,11,opt,name=rotate_backup_expire,json=rotateBackupExpire,proto3" json:"rotate_backup_expire,omitempty"`
	// 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
	RotateBackupCompress int64 `protobuf:"varint,12,opt,name=rotate_backup_compress,json=rotateBackupCompress,proto3" json:"rotate_backup_compress,omitempty"`
	// 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
	RotateCheckInterval *durationpb.Duration `protobuf:"bytes,13,opt,name=rotate_check_interval,json=rotateCheckInterval,proto3" json:"rotate_check_interval,omitempty"`
	// 关闭终端的颜色打印。默认开启
	StdoutColorDisabled bool `protobuf:"varint,14,opt,name=stdout_color_disabled,json=stdoutColorDisabled,proto3" json:"stdout_color_disabled,omitempty"`
	// 日志文件是否带上颜色。默认false，表示不带颜色
	WriteColorEnabled bool `protobuf:"varint,15,opt,name=write_color_enabled,json=writeColorEnabled,proto3" json:"write_color_enabled,omitempty"`
}

func (x *Logger) Reset() {
	*x = Logger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_config_logger_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger) ProtoMessage() {}

func (x *Logger) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_config_logger_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger.ProtoReflect.Descriptor instead.
func (*Logger) Descriptor() ([]byte, []int) {
	return file_pkg_config_logger_config_proto_rawDescGZIP(), []int{0}
}

func (x *Logger) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Logger) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Logger) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Logger) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Logger) GetCtxKeys() map[string]*anypb.Any {
	if x != nil {
		return x.CtxKeys
	}
	return nil
}

func (x *Logger) GetHeader() *wrapperspb.BoolValue {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Logger) GetStdout() *wrapperspb.BoolValue {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *Logger) GetRotateSize() int64 {
	if x != nil {
		return x.RotateSize
	}
	return 0
}

func (x *Logger) GetRotateExpire() int64 {
	if x != nil {
		return x.RotateExpire
	}
	return 0
}

func (x *Logger) GetRotateBackupLimit() int64 {
	if x != nil {
		return x.RotateBackupLimit
	}
	return 0
}

func (x *Logger) GetRotateBackupExpire() int64 {
	if x != nil {
		return x.RotateBackupExpire
	}
	return 0
}

func (x *Logger) GetRotateBackupCompress() int64 {
	if x != nil {
		return x.RotateBackupCompress
	}
	return 0
}

func (x *Logger) GetRotateCheckInterval() *durationpb.Duration {
	if x != nil {
		return x.RotateCheckInterval
	}
	return nil
}

func (x *Logger) GetStdoutColorDisabled() bool {
	if x != nil {
		return x.StdoutColorDisabled
	}
	return false
}

func (x *Logger) GetWriteColorEnabled() bool {
	if x != nil {
		return x.WriteColorEnabled
	}
	return false
}

// Log 日志
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default string             `protobuf:"bytes,1,opt,name=default,proto3" json:"default,omitempty"`
	Loggers map[string]*Logger `protobuf:"bytes,2,rep,name=loggers,proto3" json:"loggers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_config_logger_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_config_logger_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_pkg_config_logger_config_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *Config) GetLoggers() map[string]*Logger {
	if x != nil {
		return x.Loggers
	}
	return nil
}

var File_pkg_config_logger_config_proto protoreflect.FileDescriptor

var file_pkg_config_logger_config_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec,
	0x05, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x41, 0x0a, 0x08, 0x63, 0x74, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x74, 0x78,
	0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x74, 0x78, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x50, 0x0a, 0x0c, 0x43,
	0x74, 0x78, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x1a, 0x55, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x4f, 0x0a, 0x11, 0x70,
	0x6b, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6e, 0x61, 0x72, 0x74, 0x6c, 0x75, 0x2f, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x3b, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_config_logger_config_proto_rawDescOnce sync.Once
	file_pkg_config_logger_config_proto_rawDescData = file_pkg_config_logger_config_proto_rawDesc
)

func file_pkg_config_logger_config_proto_rawDescGZIP() []byte {
	file_pkg_config_logger_config_proto_rawDescOnce.Do(func() {
		file_pkg_config_logger_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_config_logger_config_proto_rawDescData)
	})
	return file_pkg_config_logger_config_proto_rawDescData
}

var file_pkg_config_logger_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_config_logger_config_proto_goTypes = []interface{}{
	(*Logger)(nil),               // 0: pkg.config.logger.Logger
	(*Config)(nil),               // 1: pkg.config.logger.Config
	nil,                          // 2: pkg.config.logger.Logger.CtxKeysEntry
	nil,                          // 3: pkg.config.logger.Config.LoggersEntry
	(*wrapperspb.BoolValue)(nil), // 4: google.protobuf.BoolValue
	(*durationpb.Duration)(nil),  // 5: google.protobuf.Duration
	(*anypb.Any)(nil),            // 6: google.protobuf.Any
}
var file_pkg_config_logger_config_proto_depIdxs = []int32{
	2, // 0: pkg.config.logger.Logger.ctx_keys:type_name -> pkg.config.logger.Logger.CtxKeysEntry
	4, // 1: pkg.config.logger.Logger.header:type_name -> google.protobuf.BoolValue
	4, // 2: pkg.config.logger.Logger.stdout:type_name -> google.protobuf.BoolValue
	5, // 3: pkg.config.logger.Logger.rotate_check_interval:type_name -> google.protobuf.Duration
	3, // 4: pkg.config.logger.Config.loggers:type_name -> pkg.config.logger.Config.LoggersEntry
	6, // 5: pkg.config.logger.Logger.CtxKeysEntry.value:type_name -> google.protobuf.Any
	0, // 6: pkg.config.logger.Config.LoggersEntry.value:type_name -> pkg.config.logger.Logger
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pkg_config_logger_config_proto_init() }
func file_pkg_config_logger_config_proto_init() {
	if File_pkg_config_logger_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_config_logger_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_config_logger_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_config_logger_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_config_logger_config_proto_goTypes,
		DependencyIndexes: file_pkg_config_logger_config_proto_depIdxs,
		MessageInfos:      file_pkg_config_logger_config_proto_msgTypes,
	}.Build()
	File_pkg_config_logger_config_proto = out.File
	file_pkg_config_logger_config_proto_rawDesc = nil
	file_pkg_config_logger_config_proto_goTypes = nil
	file_pkg_config_logger_config_proto_depIdxs = nil
}
