// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/v1/area/polygon.proto

package area

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolygonClient is the client API for Polygon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolygonClient interface {
	CreatePolygon(ctx context.Context, in *CreatePolygonRequest, opts ...grpc.CallOption) (*CreatePolygonReply, error)
	UpdatePolygon(ctx context.Context, in *UpdatePolygonRequest, opts ...grpc.CallOption) (*UpdatePolygonReply, error)
	DeletePolygon(ctx context.Context, in *DeletePolygonRequest, opts ...grpc.CallOption) (*DeletePolygonReply, error)
	GetPolygon(ctx context.Context, in *GetPolygonRequest, opts ...grpc.CallOption) (*GetPolygonReply, error)
	ListPolygon(ctx context.Context, in *ListPolygonRequest, opts ...grpc.CallOption) (*ListPolygonReply, error)
}

type polygonClient struct {
	cc grpc.ClientConnInterface
}

func NewPolygonClient(cc grpc.ClientConnInterface) PolygonClient {
	return &polygonClient{cc}
}

func (c *polygonClient) CreatePolygon(ctx context.Context, in *CreatePolygonRequest, opts ...grpc.CallOption) (*CreatePolygonReply, error) {
	out := new(CreatePolygonReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Polygon/CreatePolygon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonClient) UpdatePolygon(ctx context.Context, in *UpdatePolygonRequest, opts ...grpc.CallOption) (*UpdatePolygonReply, error) {
	out := new(UpdatePolygonReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Polygon/UpdatePolygon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonClient) DeletePolygon(ctx context.Context, in *DeletePolygonRequest, opts ...grpc.CallOption) (*DeletePolygonReply, error) {
	out := new(DeletePolygonReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Polygon/DeletePolygon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonClient) GetPolygon(ctx context.Context, in *GetPolygonRequest, opts ...grpc.CallOption) (*GetPolygonReply, error) {
	out := new(GetPolygonReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Polygon/GetPolygon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonClient) ListPolygon(ctx context.Context, in *ListPolygonRequest, opts ...grpc.CallOption) (*ListPolygonReply, error) {
	out := new(ListPolygonReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Polygon/ListPolygon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolygonServer is the server API for Polygon service.
// All implementations must embed UnimplementedPolygonServer
// for forward compatibility
type PolygonServer interface {
	CreatePolygon(context.Context, *CreatePolygonRequest) (*CreatePolygonReply, error)
	UpdatePolygon(context.Context, *UpdatePolygonRequest) (*UpdatePolygonReply, error)
	DeletePolygon(context.Context, *DeletePolygonRequest) (*DeletePolygonReply, error)
	GetPolygon(context.Context, *GetPolygonRequest) (*GetPolygonReply, error)
	ListPolygon(context.Context, *ListPolygonRequest) (*ListPolygonReply, error)
	mustEmbedUnimplementedPolygonServer()
}

// UnimplementedPolygonServer must be embedded to have forward compatible implementations.
type UnimplementedPolygonServer struct {
}

func (UnimplementedPolygonServer) CreatePolygon(context.Context, *CreatePolygonRequest) (*CreatePolygonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolygon not implemented")
}
func (UnimplementedPolygonServer) UpdatePolygon(context.Context, *UpdatePolygonRequest) (*UpdatePolygonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolygon not implemented")
}
func (UnimplementedPolygonServer) DeletePolygon(context.Context, *DeletePolygonRequest) (*DeletePolygonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolygon not implemented")
}
func (UnimplementedPolygonServer) GetPolygon(context.Context, *GetPolygonRequest) (*GetPolygonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolygon not implemented")
}
func (UnimplementedPolygonServer) ListPolygon(context.Context, *ListPolygonRequest) (*ListPolygonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolygon not implemented")
}
func (UnimplementedPolygonServer) mustEmbedUnimplementedPolygonServer() {}

// UnsafePolygonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolygonServer will
// result in compilation errors.
type UnsafePolygonServer interface {
	mustEmbedUnimplementedPolygonServer()
}

func RegisterPolygonServer(s grpc.ServiceRegistrar, srv PolygonServer) {
	s.RegisterService(&Polygon_ServiceDesc, srv)
}

func _Polygon_CreatePolygon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolygonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonServer).CreatePolygon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Polygon/CreatePolygon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonServer).CreatePolygon(ctx, req.(*CreatePolygonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polygon_UpdatePolygon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolygonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonServer).UpdatePolygon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Polygon/UpdatePolygon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonServer).UpdatePolygon(ctx, req.(*UpdatePolygonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polygon_DeletePolygon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolygonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonServer).DeletePolygon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Polygon/DeletePolygon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonServer).DeletePolygon(ctx, req.(*DeletePolygonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polygon_GetPolygon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolygonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonServer).GetPolygon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Polygon/GetPolygon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonServer).GetPolygon(ctx, req.(*GetPolygonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polygon_ListPolygon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPolygonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonServer).ListPolygon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Polygon/ListPolygon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonServer).ListPolygon(ctx, req.(*ListPolygonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Polygon_ServiceDesc is the grpc.ServiceDesc for Polygon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Polygon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.area.Polygon",
	HandlerType: (*PolygonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolygon",
			Handler:    _Polygon_CreatePolygon_Handler,
		},
		{
			MethodName: "UpdatePolygon",
			Handler:    _Polygon_UpdatePolygon_Handler,
		},
		{
			MethodName: "DeletePolygon",
			Handler:    _Polygon_DeletePolygon_Handler,
		},
		{
			MethodName: "GetPolygon",
			Handler:    _Polygon_GetPolygon_Handler,
		},
		{
			MethodName: "ListPolygon",
			Handler:    _Polygon_ListPolygon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/area/polygon.proto",
}
