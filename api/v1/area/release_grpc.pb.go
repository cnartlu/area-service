// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/v1/area/release.proto

package area

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReleaseClient is the client API for Release service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReleaseClient interface {
	CreateRelease(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*CreateReleaseReply, error)
	UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*UpdateReleaseReply, error)
	DeleteRelease(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*DeleteReleaseReply, error)
	GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*GetReleaseReply, error)
	ListRelease(ctx context.Context, in *ListReleaseRequest, opts ...grpc.CallOption) (*ListReleaseReply, error)
}

type releaseClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseClient(cc grpc.ClientConnInterface) ReleaseClient {
	return &releaseClient{cc}
}

func (c *releaseClient) CreateRelease(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*CreateReleaseReply, error) {
	out := new(CreateReleaseReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Release/CreateRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseClient) UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*UpdateReleaseReply, error) {
	out := new(UpdateReleaseReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Release/UpdateRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseClient) DeleteRelease(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*DeleteReleaseReply, error) {
	out := new(DeleteReleaseReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Release/DeleteRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseClient) GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*GetReleaseReply, error) {
	out := new(GetReleaseReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Release/GetRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseClient) ListRelease(ctx context.Context, in *ListReleaseRequest, opts ...grpc.CallOption) (*ListReleaseReply, error) {
	out := new(ListReleaseReply)
	err := c.cc.Invoke(ctx, "/api.v1.area.Release/ListRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseServer is the server API for Release service.
// All implementations must embed UnimplementedReleaseServer
// for forward compatibility
type ReleaseServer interface {
	CreateRelease(context.Context, *CreateReleaseRequest) (*CreateReleaseReply, error)
	UpdateRelease(context.Context, *UpdateReleaseRequest) (*UpdateReleaseReply, error)
	DeleteRelease(context.Context, *DeleteReleaseRequest) (*DeleteReleaseReply, error)
	GetRelease(context.Context, *GetReleaseRequest) (*GetReleaseReply, error)
	ListRelease(context.Context, *ListReleaseRequest) (*ListReleaseReply, error)
	mustEmbedUnimplementedReleaseServer()
}

// UnimplementedReleaseServer must be embedded to have forward compatible implementations.
type UnimplementedReleaseServer struct {
}

func (UnimplementedReleaseServer) CreateRelease(context.Context, *CreateReleaseRequest) (*CreateReleaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (UnimplementedReleaseServer) UpdateRelease(context.Context, *UpdateReleaseRequest) (*UpdateReleaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelease not implemented")
}
func (UnimplementedReleaseServer) DeleteRelease(context.Context, *DeleteReleaseRequest) (*DeleteReleaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelease not implemented")
}
func (UnimplementedReleaseServer) GetRelease(context.Context, *GetReleaseRequest) (*GetReleaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (UnimplementedReleaseServer) ListRelease(context.Context, *ListReleaseRequest) (*ListReleaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelease not implemented")
}
func (UnimplementedReleaseServer) mustEmbedUnimplementedReleaseServer() {}

// UnsafeReleaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReleaseServer will
// result in compilation errors.
type UnsafeReleaseServer interface {
	mustEmbedUnimplementedReleaseServer()
}

func RegisterReleaseServer(s grpc.ServiceRegistrar, srv ReleaseServer) {
	s.RegisterService(&Release_ServiceDesc, srv)
}

func _Release_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Release/CreateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServer).CreateRelease(ctx, req.(*CreateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Release_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Release/UpdateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServer).UpdateRelease(ctx, req.(*UpdateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Release_DeleteRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServer).DeleteRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Release/DeleteRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServer).DeleteRelease(ctx, req.(*DeleteReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Release_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Release/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServer).GetRelease(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Release_ListRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServer).ListRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.area.Release/ListRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServer).ListRelease(ctx, req.(*ListReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Release_ServiceDesc is the grpc.ServiceDesc for Release service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Release_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.area.Release",
	HandlerType: (*ReleaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRelease",
			Handler:    _Release_CreateRelease_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _Release_UpdateRelease_Handler,
		},
		{
			MethodName: "DeleteRelease",
			Handler:    _Release_DeleteRelease_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _Release_GetRelease_Handler,
		},
		{
			MethodName: "ListRelease",
			Handler:    _Release_ListRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/area/release.proto",
}
