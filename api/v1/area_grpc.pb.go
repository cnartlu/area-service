// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/v1/area.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AreaClient is the client API for Area service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AreaClient interface {
	// List 列表
	List(ctx context.Context, in *ListAreaRequest, opts ...grpc.CallOption) (*ListAreaReply, error)
	// View 详情
	View(ctx context.Context, in *GetAreaRequest, opts ...grpc.CallOption) (*GetAreaReply, error)
	// CascadeList 级联列表
	CascadeList(ctx context.Context, in *CascadeListAreaRequest, opts ...grpc.CallOption) (*CascadeListAreaReply, error)
	// Create 新增
	Create(ctx context.Context, in *CreateAreaRequest, opts ...grpc.CallOption) (*CreateAreaReply, error)
	// Update 更新
	Update(ctx context.Context, in *UpdateAreaRequest, opts ...grpc.CallOption) (*UpdateAreaReply, error)
	// Delete 删除
	Delete(ctx context.Context, in *DeleteAreaRequest, opts ...grpc.CallOption) (*DeleteAreaReply, error)
}

type areaClient struct {
	cc grpc.ClientConnInterface
}

func NewAreaClient(cc grpc.ClientConnInterface) AreaClient {
	return &areaClient{cc}
}

func (c *areaClient) List(ctx context.Context, in *ListAreaRequest, opts ...grpc.CallOption) (*ListAreaReply, error) {
	out := new(ListAreaReply)
	err := c.cc.Invoke(ctx, "/api.v1.Area/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) View(ctx context.Context, in *GetAreaRequest, opts ...grpc.CallOption) (*GetAreaReply, error) {
	out := new(GetAreaReply)
	err := c.cc.Invoke(ctx, "/api.v1.Area/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) CascadeList(ctx context.Context, in *CascadeListAreaRequest, opts ...grpc.CallOption) (*CascadeListAreaReply, error) {
	out := new(CascadeListAreaReply)
	err := c.cc.Invoke(ctx, "/api.v1.Area/CascadeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) Create(ctx context.Context, in *CreateAreaRequest, opts ...grpc.CallOption) (*CreateAreaReply, error) {
	out := new(CreateAreaReply)
	err := c.cc.Invoke(ctx, "/api.v1.Area/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) Update(ctx context.Context, in *UpdateAreaRequest, opts ...grpc.CallOption) (*UpdateAreaReply, error) {
	out := new(UpdateAreaReply)
	err := c.cc.Invoke(ctx, "/api.v1.Area/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) Delete(ctx context.Context, in *DeleteAreaRequest, opts ...grpc.CallOption) (*DeleteAreaReply, error) {
	out := new(DeleteAreaReply)
	err := c.cc.Invoke(ctx, "/api.v1.Area/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaServer is the server API for Area service.
// All implementations must embed UnimplementedAreaServer
// for forward compatibility
type AreaServer interface {
	// List 列表
	List(context.Context, *ListAreaRequest) (*ListAreaReply, error)
	// View 详情
	View(context.Context, *GetAreaRequest) (*GetAreaReply, error)
	// CascadeList 级联列表
	CascadeList(context.Context, *CascadeListAreaRequest) (*CascadeListAreaReply, error)
	// Create 新增
	Create(context.Context, *CreateAreaRequest) (*CreateAreaReply, error)
	// Update 更新
	Update(context.Context, *UpdateAreaRequest) (*UpdateAreaReply, error)
	// Delete 删除
	Delete(context.Context, *DeleteAreaRequest) (*DeleteAreaReply, error)
	mustEmbedUnimplementedAreaServer()
}

// UnimplementedAreaServer must be embedded to have forward compatible implementations.
type UnimplementedAreaServer struct {
}

func (UnimplementedAreaServer) List(context.Context, *ListAreaRequest) (*ListAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAreaServer) View(context.Context, *GetAreaRequest) (*GetAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedAreaServer) CascadeList(context.Context, *CascadeListAreaRequest) (*CascadeListAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CascadeList not implemented")
}
func (UnimplementedAreaServer) Create(context.Context, *CreateAreaRequest) (*CreateAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAreaServer) Update(context.Context, *UpdateAreaRequest) (*UpdateAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAreaServer) Delete(context.Context, *DeleteAreaRequest) (*DeleteAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAreaServer) mustEmbedUnimplementedAreaServer() {}

// UnsafeAreaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AreaServer will
// result in compilation errors.
type UnsafeAreaServer interface {
	mustEmbedUnimplementedAreaServer()
}

func RegisterAreaServer(s grpc.ServiceRegistrar, srv AreaServer) {
	s.RegisterService(&Area_ServiceDesc, srv)
}

func _Area_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Area/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).List(ctx, req.(*ListAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Area/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).View(ctx, req.(*GetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_CascadeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CascadeListAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).CascadeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Area/CascadeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).CascadeList(ctx, req.(*CascadeListAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Area/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).Create(ctx, req.(*CreateAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Area/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).Update(ctx, req.(*UpdateAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Area/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).Delete(ctx, req.(*DeleteAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Area_ServiceDesc is the grpc.ServiceDesc for Area service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Area_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Area",
	HandlerType: (*AreaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Area_List_Handler,
		},
		{
			MethodName: "View",
			Handler:    _Area_View_Handler,
		},
		{
			MethodName: "CascadeList",
			Handler:    _Area_CascadeList_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Area_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Area_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Area_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/area.proto",
}
