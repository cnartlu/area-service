// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/v1/areaPolygon.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AreaPolygonClient is the client API for AreaPolygon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AreaPolygonClient interface {
	ListAreaPolygon(ctx context.Context, in *ListAreaPolygonRequest, opts ...grpc.CallOption) (*ListAreaPolygonReply, error)
	GetAreaPolygon(ctx context.Context, in *GetAreaPolygonRequest, opts ...grpc.CallOption) (*GetAreaPolygonReply, error)
}

type areaPolygonClient struct {
	cc grpc.ClientConnInterface
}

func NewAreaPolygonClient(cc grpc.ClientConnInterface) AreaPolygonClient {
	return &areaPolygonClient{cc}
}

func (c *areaPolygonClient) ListAreaPolygon(ctx context.Context, in *ListAreaPolygonRequest, opts ...grpc.CallOption) (*ListAreaPolygonReply, error) {
	out := new(ListAreaPolygonReply)
	err := c.cc.Invoke(ctx, "/api.v1.AreaPolygon/ListAreaPolygon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaPolygonClient) GetAreaPolygon(ctx context.Context, in *GetAreaPolygonRequest, opts ...grpc.CallOption) (*GetAreaPolygonReply, error) {
	out := new(GetAreaPolygonReply)
	err := c.cc.Invoke(ctx, "/api.v1.AreaPolygon/GetAreaPolygon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaPolygonServer is the server API for AreaPolygon service.
// All implementations must embed UnimplementedAreaPolygonServer
// for forward compatibility
type AreaPolygonServer interface {
	ListAreaPolygon(context.Context, *ListAreaPolygonRequest) (*ListAreaPolygonReply, error)
	GetAreaPolygon(context.Context, *GetAreaPolygonRequest) (*GetAreaPolygonReply, error)
	mustEmbedUnimplementedAreaPolygonServer()
}

// UnimplementedAreaPolygonServer must be embedded to have forward compatible implementations.
type UnimplementedAreaPolygonServer struct {
}

func (UnimplementedAreaPolygonServer) ListAreaPolygon(context.Context, *ListAreaPolygonRequest) (*ListAreaPolygonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAreaPolygon not implemented")
}
func (UnimplementedAreaPolygonServer) GetAreaPolygon(context.Context, *GetAreaPolygonRequest) (*GetAreaPolygonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaPolygon not implemented")
}
func (UnimplementedAreaPolygonServer) mustEmbedUnimplementedAreaPolygonServer() {}

// UnsafeAreaPolygonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AreaPolygonServer will
// result in compilation errors.
type UnsafeAreaPolygonServer interface {
	mustEmbedUnimplementedAreaPolygonServer()
}

func RegisterAreaPolygonServer(s grpc.ServiceRegistrar, srv AreaPolygonServer) {
	s.RegisterService(&AreaPolygon_ServiceDesc, srv)
}

func _AreaPolygon_ListAreaPolygon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreaPolygonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaPolygonServer).ListAreaPolygon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.AreaPolygon/ListAreaPolygon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaPolygonServer).ListAreaPolygon(ctx, req.(*ListAreaPolygonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaPolygon_GetAreaPolygon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAreaPolygonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaPolygonServer).GetAreaPolygon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.AreaPolygon/GetAreaPolygon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaPolygonServer).GetAreaPolygon(ctx, req.(*GetAreaPolygonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AreaPolygon_ServiceDesc is the grpc.ServiceDesc for AreaPolygon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AreaPolygon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.AreaPolygon",
	HandlerType: (*AreaPolygonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAreaPolygon",
			Handler:    _AreaPolygon_ListAreaPolygon_Handler,
		},
		{
			MethodName: "GetAreaPolygon",
			Handler:    _AreaPolygon_GetAreaPolygon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/areaPolygon.proto",
}
