// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package api

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsSuccess(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_SUCCESS.String() && e.Code == 200
}

func ErrorSuccess(format string, args ...interface{}) *errors.Error {
	return errors.New(200, Error_SUCCESS.String(), fmt.Sprintf(format, args...))
}

func IsParamMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_PARAM_MISSING.String() && e.Code == 400
}

func ErrorParamMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_PARAM_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsParamFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_PARAM_FORMAT.String() && e.Code == 400
}

func ErrorParamFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_PARAM_FORMAT.String(), fmt.Sprintf(format, args...))
}

func IsTokenMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_TOKEN_MISSING.String() && e.Code == 401
}

func ErrorTokenMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(401, Error_TOKEN_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsTokenInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_TOKEN_INVALID.String() && e.Code == 401
}

func ErrorTokenInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(401, Error_TOKEN_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsTokenExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_TOKEN_EXPIRE.String() && e.Code == 401
}

func ErrorTokenExpire(format string, args ...interface{}) *errors.Error {
	return errors.New(401, Error_TOKEN_EXPIRE.String(), fmt.Sprintf(format, args...))
}

func IsTokenBindInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_TOKEN_BIND_INVALID.String() && e.Code == 401
}

func ErrorTokenBindInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(401, Error_TOKEN_BIND_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsTokenUnbind(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_TOKEN_UNBIND.String() && e.Code == 401
}

func ErrorTokenUnbind(format string, args ...interface{}) *errors.Error {
	return errors.New(401, Error_TOKEN_UNBIND.String(), fmt.Sprintf(format, args...))
}

func IsPageNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_PAGE_NOT_FOUND.String() && e.Code == 404
}

func ErrorPageNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_PAGE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsDataNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_DATA_NOT_FOUND.String() && e.Code == 404
}

func ErrorDataNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_DATA_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
