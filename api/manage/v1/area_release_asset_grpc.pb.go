// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/manage/v1/area_release_asset.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AreaReleaseAssetClient is the client API for AreaReleaseAsset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AreaReleaseAssetClient interface {
	CreateAreaReleaseAsset(ctx context.Context, in *CreateAreaReleaseAssetRequest, opts ...grpc.CallOption) (*CreateAreaReleaseAssetReply, error)
	UpdateAreaReleaseAsset(ctx context.Context, in *UpdateAreaReleaseAssetRequest, opts ...grpc.CallOption) (*UpdateAreaReleaseAssetReply, error)
	DeleteAreaReleaseAsset(ctx context.Context, in *DeleteAreaReleaseAssetRequest, opts ...grpc.CallOption) (*DeleteAreaReleaseAssetReply, error)
	GetAreaReleaseAsset(ctx context.Context, in *GetAreaReleaseAssetRequest, opts ...grpc.CallOption) (*GetAreaReleaseAssetReply, error)
	ListAreaReleaseAsset(ctx context.Context, in *ListAreaReleaseAssetRequest, opts ...grpc.CallOption) (*ListAreaReleaseAssetReply, error)
}

type areaReleaseAssetClient struct {
	cc grpc.ClientConnInterface
}

func NewAreaReleaseAssetClient(cc grpc.ClientConnInterface) AreaReleaseAssetClient {
	return &areaReleaseAssetClient{cc}
}

func (c *areaReleaseAssetClient) CreateAreaReleaseAsset(ctx context.Context, in *CreateAreaReleaseAssetRequest, opts ...grpc.CallOption) (*CreateAreaReleaseAssetReply, error) {
	out := new(CreateAreaReleaseAssetReply)
	err := c.cc.Invoke(ctx, "/api.manage.v1.AreaReleaseAsset/CreateAreaReleaseAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaReleaseAssetClient) UpdateAreaReleaseAsset(ctx context.Context, in *UpdateAreaReleaseAssetRequest, opts ...grpc.CallOption) (*UpdateAreaReleaseAssetReply, error) {
	out := new(UpdateAreaReleaseAssetReply)
	err := c.cc.Invoke(ctx, "/api.manage.v1.AreaReleaseAsset/UpdateAreaReleaseAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaReleaseAssetClient) DeleteAreaReleaseAsset(ctx context.Context, in *DeleteAreaReleaseAssetRequest, opts ...grpc.CallOption) (*DeleteAreaReleaseAssetReply, error) {
	out := new(DeleteAreaReleaseAssetReply)
	err := c.cc.Invoke(ctx, "/api.manage.v1.AreaReleaseAsset/DeleteAreaReleaseAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaReleaseAssetClient) GetAreaReleaseAsset(ctx context.Context, in *GetAreaReleaseAssetRequest, opts ...grpc.CallOption) (*GetAreaReleaseAssetReply, error) {
	out := new(GetAreaReleaseAssetReply)
	err := c.cc.Invoke(ctx, "/api.manage.v1.AreaReleaseAsset/GetAreaReleaseAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaReleaseAssetClient) ListAreaReleaseAsset(ctx context.Context, in *ListAreaReleaseAssetRequest, opts ...grpc.CallOption) (*ListAreaReleaseAssetReply, error) {
	out := new(ListAreaReleaseAssetReply)
	err := c.cc.Invoke(ctx, "/api.manage.v1.AreaReleaseAsset/ListAreaReleaseAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaReleaseAssetServer is the server API for AreaReleaseAsset service.
// All implementations must embed UnimplementedAreaReleaseAssetServer
// for forward compatibility
type AreaReleaseAssetServer interface {
	CreateAreaReleaseAsset(context.Context, *CreateAreaReleaseAssetRequest) (*CreateAreaReleaseAssetReply, error)
	UpdateAreaReleaseAsset(context.Context, *UpdateAreaReleaseAssetRequest) (*UpdateAreaReleaseAssetReply, error)
	DeleteAreaReleaseAsset(context.Context, *DeleteAreaReleaseAssetRequest) (*DeleteAreaReleaseAssetReply, error)
	GetAreaReleaseAsset(context.Context, *GetAreaReleaseAssetRequest) (*GetAreaReleaseAssetReply, error)
	ListAreaReleaseAsset(context.Context, *ListAreaReleaseAssetRequest) (*ListAreaReleaseAssetReply, error)
	mustEmbedUnimplementedAreaReleaseAssetServer()
}

// UnimplementedAreaReleaseAssetServer must be embedded to have forward compatible implementations.
type UnimplementedAreaReleaseAssetServer struct {
}

func (UnimplementedAreaReleaseAssetServer) CreateAreaReleaseAsset(context.Context, *CreateAreaReleaseAssetRequest) (*CreateAreaReleaseAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAreaReleaseAsset not implemented")
}
func (UnimplementedAreaReleaseAssetServer) UpdateAreaReleaseAsset(context.Context, *UpdateAreaReleaseAssetRequest) (*UpdateAreaReleaseAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAreaReleaseAsset not implemented")
}
func (UnimplementedAreaReleaseAssetServer) DeleteAreaReleaseAsset(context.Context, *DeleteAreaReleaseAssetRequest) (*DeleteAreaReleaseAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAreaReleaseAsset not implemented")
}
func (UnimplementedAreaReleaseAssetServer) GetAreaReleaseAsset(context.Context, *GetAreaReleaseAssetRequest) (*GetAreaReleaseAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaReleaseAsset not implemented")
}
func (UnimplementedAreaReleaseAssetServer) ListAreaReleaseAsset(context.Context, *ListAreaReleaseAssetRequest) (*ListAreaReleaseAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAreaReleaseAsset not implemented")
}
func (UnimplementedAreaReleaseAssetServer) mustEmbedUnimplementedAreaReleaseAssetServer() {}

// UnsafeAreaReleaseAssetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AreaReleaseAssetServer will
// result in compilation errors.
type UnsafeAreaReleaseAssetServer interface {
	mustEmbedUnimplementedAreaReleaseAssetServer()
}

func RegisterAreaReleaseAssetServer(s grpc.ServiceRegistrar, srv AreaReleaseAssetServer) {
	s.RegisterService(&AreaReleaseAsset_ServiceDesc, srv)
}

func _AreaReleaseAsset_CreateAreaReleaseAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAreaReleaseAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaReleaseAssetServer).CreateAreaReleaseAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.manage.v1.AreaReleaseAsset/CreateAreaReleaseAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaReleaseAssetServer).CreateAreaReleaseAsset(ctx, req.(*CreateAreaReleaseAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaReleaseAsset_UpdateAreaReleaseAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAreaReleaseAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaReleaseAssetServer).UpdateAreaReleaseAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.manage.v1.AreaReleaseAsset/UpdateAreaReleaseAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaReleaseAssetServer).UpdateAreaReleaseAsset(ctx, req.(*UpdateAreaReleaseAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaReleaseAsset_DeleteAreaReleaseAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAreaReleaseAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaReleaseAssetServer).DeleteAreaReleaseAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.manage.v1.AreaReleaseAsset/DeleteAreaReleaseAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaReleaseAssetServer).DeleteAreaReleaseAsset(ctx, req.(*DeleteAreaReleaseAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaReleaseAsset_GetAreaReleaseAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAreaReleaseAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaReleaseAssetServer).GetAreaReleaseAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.manage.v1.AreaReleaseAsset/GetAreaReleaseAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaReleaseAssetServer).GetAreaReleaseAsset(ctx, req.(*GetAreaReleaseAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaReleaseAsset_ListAreaReleaseAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreaReleaseAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaReleaseAssetServer).ListAreaReleaseAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.manage.v1.AreaReleaseAsset/ListAreaReleaseAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaReleaseAssetServer).ListAreaReleaseAsset(ctx, req.(*ListAreaReleaseAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AreaReleaseAsset_ServiceDesc is the grpc.ServiceDesc for AreaReleaseAsset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AreaReleaseAsset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.manage.v1.AreaReleaseAsset",
	HandlerType: (*AreaReleaseAssetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAreaReleaseAsset",
			Handler:    _AreaReleaseAsset_CreateAreaReleaseAsset_Handler,
		},
		{
			MethodName: "UpdateAreaReleaseAsset",
			Handler:    _AreaReleaseAsset_UpdateAreaReleaseAsset_Handler,
		},
		{
			MethodName: "DeleteAreaReleaseAsset",
			Handler:    _AreaReleaseAsset_DeleteAreaReleaseAsset_Handler,
		},
		{
			MethodName: "GetAreaReleaseAsset",
			Handler:    _AreaReleaseAsset_GetAreaReleaseAsset_Handler,
		},
		{
			MethodName: "ListAreaReleaseAsset",
			Handler:    _AreaReleaseAsset_ListAreaReleaseAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/manage/v1/area_release_asset.proto",
}
