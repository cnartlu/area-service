// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package tests

import (
	component2 "github.com/cnartlu/area-service/internal/component"
	"github.com/cnartlu/area-service/internal/component/db"
	"github.com/cnartlu/area-service/internal/config"
	"github.com/cnartlu/area-service/internal/cron"
	"github.com/cnartlu/area-service/internal/cron/job"
	"github.com/cnartlu/area-service/pkg/component"
	"github.com/cnartlu/area-service/pkg/component/log"
	"github.com/cnartlu/area-service/pkg/component/proxy"
	"github.com/google/wire"
)

// Injectors from wire.go:

func Init() (*Tests, func(), error) {
	logger, err := log.NewDefault()
	if err != nil {
		return nil, nil, err
	}
	configConfig, cleanup, err := config.New()
	if err != nil {
		return nil, nil, err
	}
	bootstrap := configConfig.Bootstrap
	dbConfig := bootstrap.Database
	dbDB, cleanup2, err := db.New(logger, dbConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	application := bootstrap.Application
	proxyConfig := application.Proxy
	client := proxy.New(proxyConfig)
	github := job.NewGithub(logger, dbDB, client)
	cronJob := NewCronJob(github)
	tests := New(logger, configConfig, cronJob)
	return tests, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var providerSet = wire.NewSet(log.NewDefault, config.ProviderSet, component.ProviderSet, component2.ProviderSet, cron.ProviderSet, NewCronJob)
