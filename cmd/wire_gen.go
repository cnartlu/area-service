// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/cnartlu/area-service/component/log"
	"github.com/cnartlu/area-service/component/redis"
	area2 "github.com/cnartlu/area-service/internal/biz/area"
	"github.com/cnartlu/area-service/internal/component/db"
	config2 "github.com/cnartlu/area-service/internal/config"
	"github.com/cnartlu/area-service/internal/data/area"
	"github.com/cnartlu/area-service/internal/server"
	"github.com/cnartlu/area-service/internal/server/cron"
	"github.com/cnartlu/area-service/internal/server/cron/job"
	"github.com/cnartlu/area-service/internal/server/grpc"
	"github.com/cnartlu/area-service/internal/server/http"
	"github.com/cnartlu/area-service/internal/server/http/router"
	"github.com/cnartlu/area-service/internal/service"
	"github.com/go-kratos/kratos/v2/config"
)

// Injectors from wire.go:

// initApp 初始化应用
func initApp(configConfig config.Config) (*server.Server, func(), error) {
	config3, err := config2.New(configConfig)
	if err != nil {
		return nil, nil, err
	}
	logConfig := config3.Logger
	logger, err := log.New(logConfig)
	if err != nil {
		return nil, nil, err
	}
	configGrpc := config3.Grpc
	dbConfig := config3.Db
	client, cleanup, err := db.NewEnt(dbConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	redisConfig := config3.Redis
	redisClient, cleanup2, err := redis.New(redisConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	areaRepo := area.NewAreaRepo(client, redisClient)
	managerUsecase := area2.NewManagerUsecase(areaRepo)
	areaService := service.NewAreaService(managerUsecase)
	grpcServer := grpc.NewServer(logger, configGrpc, areaService)
	configHttp := config3.Http
	routerArea := router.NewArea(areaService)
	v := router.NewRouter(routerArea)
	httpServer := http.NewServer(logger, configHttp, v)
	daily := job.NewDaily(logger)
	cronServer := cron.NewServer(logger, daily)
	serverServer := server.NewServer(logger, config3, grpcServer, httpServer, cronServer)
	return serverServer, func() {
		cleanup2()
		cleanup()
	}, nil
}
