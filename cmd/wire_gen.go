// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"context"
	"github.com/cnartlu/area-service/component/app"
	"github.com/cnartlu/area-service/component/filesystem"
	"github.com/cnartlu/area-service/component/github"
	"github.com/cnartlu/area-service/component/log"
	"github.com/cnartlu/area-service/component/proxy"
	"github.com/cnartlu/area-service/component/redis"
	area2 "github.com/cnartlu/area-service/internal/biz/area"
	github3 "github.com/cnartlu/area-service/internal/biz/city/github"
	"github.com/cnartlu/area-service/internal/biz/city/splider"
	area4 "github.com/cnartlu/area-service/internal/biz/city/splider/area"
	asset3 "github.com/cnartlu/area-service/internal/biz/city/splider/asset"
	"github.com/cnartlu/area-service/internal/command"
	"github.com/cnartlu/area-service/internal/command/handler"
	github4 "github.com/cnartlu/area-service/internal/command/handler/github"
	"github.com/cnartlu/area-service/internal/command/script"
	"github.com/cnartlu/area-service/internal/config"
	"github.com/cnartlu/area-service/internal/data/area"
	"github.com/cnartlu/area-service/internal/data/city/splider"
	area3 "github.com/cnartlu/area-service/internal/data/city/splider/area"
	asset2 "github.com/cnartlu/area-service/internal/data/city/splider/asset"
	"github.com/cnartlu/area-service/internal/data/data"
	github2 "github.com/cnartlu/area-service/internal/data/github"
	"github.com/cnartlu/area-service/internal/server"
	"github.com/cnartlu/area-service/internal/server/cron"
	"github.com/cnartlu/area-service/internal/server/cron/job"
	"github.com/cnartlu/area-service/internal/server/grpc"
	"github.com/cnartlu/area-service/internal/server/http"
	"github.com/cnartlu/area-service/internal/service"
)

// Injectors from wire.go:

// initApp 初始化应用
func initApp(contextContext context.Context, string2 string) (*server.Server, func(), error) {
	configConfig, err := config.NewByString(string2)
	if err != nil {
		return nil, nil, err
	}
	appConfig := config.GetApp(configConfig)
	appApp := app.New(appConfig)
	logConfig := config.GetLogger(configConfig)
	logger, err := log.New(logConfig)
	if err != nil {
		return nil, nil, err
	}
	configGrpc := config.GetGrpc(configConfig)
	redisConfig := config.GetRedis(configConfig)
	client, cleanup, err := redis.New(redisConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	databaseConfig := config.GetDb(configConfig)
	dataData, cleanup2, err := data.NewData(logger, client, databaseConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	areaRepo := area.NewAreaRepo(dataData)
	areaUsecase := area2.NewAreaUsecase(areaRepo)
	areaService := service.NewAreaService(areaUsecase)
	grpcServer := grpc.NewServer(logger, configGrpc, areaService)
	configHttp := config.GetHttp(configConfig)
	httpServer := http.NewServer(appApp, logger, configHttp, areaService)
	daily := job.NewDaily(logger)
	cronServer := cron.NewServer(logger, daily)
	serverServer := server.NewServer(contextContext, appApp, logger, grpcServer, httpServer, cronServer)
	return serverServer, func() {
		cleanup2()
		cleanup()
	}, nil
}

// initCommand 初始化命令行
func initCommand(string2 string) (*command.Command, func(), error) {
	configConfig, err := config.NewByString(string2)
	if err != nil {
		return nil, nil, err
	}
	appConfig := config.GetApp(configConfig)
	client, err := proxy.NewByAppConfig(appConfig)
	if err != nil {
		return nil, nil, err
	}
	githubClient := github.New(client)
	githubRepo := github2.NewGithubRepo(githubClient)
	appApp := app.New(appConfig)
	filesystemConfig := config.GetFileSystem(configConfig)
	fileSystem := filesystem.New(filesystemConfig, client)
	logConfig := config.GetLogger(configConfig)
	logger, err := log.New(logConfig)
	if err != nil {
		return nil, nil, err
	}
	redisConfig := config.GetRedis(configConfig)
	redisClient, cleanup, err := redis.New(redisConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	databaseConfig := config.GetDb(configConfig)
	dataData, cleanup2, err := data.NewData(logger, redisClient, databaseConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	spliderRepo := asset.NewSpliderRepo(dataData)
	spliderUsecase := splider.NewSpliderUsecase(spliderRepo)
	assetRepo := asset2.NewAssetRepo(dataData)
	assetUsecase := asset3.NewAssetUsecase(assetRepo)
	areaRepo := area3.NewAreaRepo(dataData)
	areaUsecase := area4.NewAreaUsecase(areaRepo)
	githubUsecase := github3.NewGithubRepoUsecase(githubRepo, appApp, fileSystem, dataData, spliderUsecase, assetUsecase, areaUsecase)
	githubHandler := github4.NewHandler(githubUsecase, logger)
	handlerHandler := handler.New(githubHandler)
	scriptScript := script.New()
	commandCommand := command.New(handlerHandler, scriptScript)
	return commandCommand, func() {
		cleanup2()
		cleanup()
	}, nil
}
