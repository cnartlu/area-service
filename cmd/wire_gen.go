// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/cnartlu/area-service/internal/app"
	"github.com/cnartlu/area-service/internal/component/db"
	"github.com/cnartlu/area-service/internal/config"
	"github.com/cnartlu/area-service/internal/cron"
	"github.com/cnartlu/area-service/internal/cron/jobs"
	"github.com/cnartlu/area-service/internal/repository/area/release"
	"github.com/cnartlu/area-service/internal/transport"
	"github.com/cnartlu/area-service/internal/transport/grpc"
	"github.com/cnartlu/area-service/internal/transport/http"
	"github.com/cnartlu/area-service/internal/transport/http/handler/v1/area"
	"github.com/cnartlu/area-service/internal/transport/http/router"
	"github.com/cnartlu/area-service/pkg/component/log"
	"github.com/cnartlu/area-service/pkg/component/redis"
)

// Injectors from wire.go:

// initApp 初始化应用
func initApp(logger *log.Logger, configConfig *config.Config) (*app.App, func(), error) {
	bootstrap := configConfig.Bootstrap
	redisConfig := bootstrap.Redis
	client, cleanup, err := redis.New(redisConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	dbConfig := bootstrap.Database
	entClient, cleanup2, err := db.NewEnt(dbConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	repository := release.NewRepository(entClient, client)
	syncArea := jobs.NewSyncArea(repository)
	cronCron, err := cron.New(logger, client, entClient, syncArea)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	application := bootstrap.Application
	server := bootstrap.Server
	server_HTTP := server.Http
	handler := area.NewHandler()
	engine := router.New(logger, application, server_HTTP, handler)
	httpServer := http.NewHTTPServer(logger, server_HTTP, engine)
	server_GRPC := server.Grpc
	grpcServer := grpc.NewGRPCServer(logger, server_GRPC)
	transportTransport := transport.New(logger, application, httpServer, grpcServer)
	appApp := app.New(logger, cronCron, transportTransport)
	return appApp, func() {
		cleanup2()
		cleanup()
	}, nil
}
